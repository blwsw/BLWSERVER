<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hopedove.ucserver.dao.IDeptDao">
        <resultMap type="DeptVO" id="deptTreeNode">
            <id column="id" property="id"/>
            <result column="name" property="name"/>
            <result column="type" property="type"/>
            <result column="parentId" property="parentId"/>
            <collection property="subDepts" select="getSubDeptsTree" column="{id=id,factoryId=factoryId}">
                <id column="id" property="id"/>
                <result column="name" property="name"/>
                <result column="type" property="type"/>
                <result column="parentId" property="parentId"/>
            </collection>
        </resultMap>

    <sql id="deptsWhere">
        where disabled = 0
        <if test=" name != null and name != '' ">
            and name like concat('%', #{name}, '%')
        </if>
        <if test=" factoryId != null and factoryId != '' ">
            and factoryId = #{factoryId}
        </if>
        <if test=" type != null and type != '' ">
            and type = #{type}
        </if>
    </sql>

    <select id="getDepts" parameterType="map" resultType="DeptVO">
        <if test=" pages != null ">
        select
            top ${pages.page_pageSize} *
        from
        (
        </if>
        select top 100 percent row_number() over(order by id) as rows, * from uc_dept
        <include refid="deptsWhere"></include>
        <if test=" sorts != null and sorts != '' ">
            order by ${sorts}
        </if>
        <if test=" pages != null ">
        ) as t
        where rows > ${pages.page_startIndex} order by rows asc
        </if>
    </select>

    <select id="getDeptsCount" parameterType="map" resultType="int">
        select
        count(*)
        from
        uc_dept
        <include refid="deptsWhere"></include>
    </select>

    <select id="getDept" parameterType="int" resultType="DeptVO">
        select
            top 1 t1.*
        from
        uc_dept t1
        where id = #{id} and t1.disabled = 0
    </select>

    <insert id="addDept" parameterType="DeptVO">
        <selectKey resultType="java.lang.Integer" order="AFTER" keyProperty="id">
        insert into uc_dept
        (name, factoryId, type, parentId, path, pathName, disabled, createUserId, createUserName, createDatetime, createDeptId, createIp, updateUserId, updateUserName, updateDatetime, updateDeptId, updateIp)
        values
        (#{name}, #{factoryId}, #{type}, #{parentId}, #{path}, #{pathName}, #{disabled}, #{createUserId}, #{createUserName}, #{createDatetime},#{createDeptId}, #{createIp}, #{updateUserId}, #{updateUserName}, #{updateDatetime}, #{updateDeptId}, #{updateIp})
    	;SELECT SCOPE_IDENTITY()
        </selectKey>
    </insert>

    <update id="modifyDept" parameterType="DeptVO">
        update
        uc_dept
        <set>
            <if test=" name != null and name != '' ">
                name = #{name},
            </if>
            <if test=" factoryId != null and factoryId != '' ">
                factoryId = #{factoryId},
            </if>
            <if test=" type != null and type != '' ">
                type = #{type},
            </if>
            <if test=" parentId != null and parentId != '' ">
                parentId = #{parentId},
            </if>
            <if test=" path != null and path != '' ">
                path = #{path},
            </if>
            <if test=" pathName != null and pathName != '' ">
                pathName = #{pathName},
            </if>
            <if test=" disabled != null and disabled != '' ">
                disabled = #{disabled},
            </if>
            <if test=" createUserId != null and createUserId != '' ">
                createUserId = #{createUserId},
            </if>
            <if test=" createUserName != null and createUserName != '' ">
                createUserName = #{createUserName},
            </if>
            <if test=" createDatetime != null ">
                createDatetime = #{createDatetime},
            </if>
            <if test=" createDeptId != null and createDeptId != '' ">
                createDeptId = #{createDeptId},
            </if>
            <if test=" createIp != null and createIp != '' ">
                createIp = #{createIp},
            </if>
            <if test=" updateUserId != null and updateUserId != '' ">
                updateUserId = #{updateUserId},
            </if>
            <if test=" updateUserName != null and updateUserName != '' ">
                updateUserName = #{updateUserName},
            </if>
            <if test=" updateDatetime != null">
                updateDatetime = #{updateDatetime},
            </if>
            <if test=" updateDeptId != null and updateDeptId != '' ">
                updateDeptId = #{updateDeptId},
            </if>
            <if test=" updateIp != null and updateIp != '' ">
                updateIp = #{updateIp},
            </if>
        </set>
        where id = #{id}
    </update>

    <delete id="removeDept" parameterType="DeptVO">
        update uc_dept set disabled = '1' where id = #{id}
    </delete>

    <select id="getDeptsTree" parameterType="map" resultMap="deptTreeNode">
        select
        *
        from
        uc_dept
        where disabled = 0
        and parentId is null
        <if test=" factoryId != null and factoryId != '' ">
            and factoryId = #{factoryId}
        </if>
    </select>

    <select id="getSubDeptsTree" parameterType="map" resultMap="deptTreeNode">
        select
        *
        from
        uc_dept
        where disabled = 0
        <if test=" id != null and id != '' ">
            and parentId = #{id}
        </if>
        <if test=" factoryId != null and factoryId != '' ">
            and factoryId = #{factoryId}
        </if>
    </select>
</mapper>
