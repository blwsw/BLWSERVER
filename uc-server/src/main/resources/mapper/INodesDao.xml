<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hopedove.ucserver.dao.node.INodeDao">

    <sql id="nodesWhere">
        where 1=1
        <if test=" queryString != null and queryString != '' ">
          and n.PID = #{queryString}
        </if>

    </sql>

    <select id="getNodes" parameterType="map" resultType="NodesVO">

        SELECT
        n.*,
        a.*
        FROM
        nodes n
        LEFT JOIN (
        SELECT
        l.id,
        l.TCurrentAlarm,
        l.TAlarm,
        l.TRiseMax,
        l.LCurrentMax,
        l.BOut,
        l.Switch1,
        l.Switch2,
        l.Switch3,
        l.Switch4,
        l.TCurrent1,
        l.TCurrent2,
        l.TCurrent3,
        '' RAlarm
        FROM
        nodesparams_ly l UNION ALL
        SELECT
        l.id,
        '' TCurrentAlarm,
        '' TAlarm,
        '' TRiseMax,
        '' LCurrentMax,
        '' BOut,
        '' Switch1,
        '' Switch2,
        '' Switch3,
        '' Switch4,
        '' TCurrent1,
        '' TCurrent2,
        '' TCurrent3,
        l.RAlarm
        FROM
        nodesparams_resister l
        ) a ON ( n.id = a.id )


        <include refid="nodesWhere"></include>
            order by n.id asc
        <if test=" pages != null ">
            limit ${pages.page_startIndex},${pages.page_pageSize}
        </if>
    </select>

    <select id="getNodesCount" parameterType="map" resultType="int">
        select
        count(*)
        from nodes n
        <include refid="nodesWhere"></include>
    </select>

    <select id="getNodesVO" parameterType="int" resultType="NodesVO">
        select
            t1.*
        from
        Nodes t1
        where addr = #{addr}
    </select>

    <insert id="addNodes" parameterType="NodesVO">
        <selectKey resultType="java.lang.Integer" order="AFTER" keyProperty="ID">
            select LAST_INSERT_ID() as ID
        </selectKey>
        insert into Nodes (addr,`delete`,`name`, PID,NodeType,descript,InstallPos,serialserver_ip,serialserver_port,longitude,latitude)
        values (#{addr},#{delete},#{name},#{PID},#{NodeType},#{descript},#{InstallPos},#{serialserver_ip},#{serialserver_port},#{longitude},#{latitude})
    </insert>
    <insert id="addNodeParamsLY" parameterType="NodesVO">
        insert into nodesparams_ly (id,addr,TCurrentAlarm,TAlarm,TRiseMax,LCurrentMax,BOut,Switch1,Switch2,Switch3,Switch4,TCurrent1,TCurrent2,TCurrent3)
            values (#{ID},#{addr},#{TCurrentAlarm},#{TAlarm},#{TRiseMax},#{LCurrentMax},#{BOut},#{Switch1},#{Switch2},#{Switch3},#{Switch4},#{TCurrent1},#{TCurrent2},#{TCurrent3})
    </insert>
    <insert id="addNodeParamsResister" parameterType="NodesVO">
        insert into nodesparams_resister (id,addr,RAlarm)
            values (#{ID},#{addr},#{RAlarm})
    </insert>

    <update id="modifyNodes" parameterType="NodesVO">
        update
        Nodes
        <set>
            <if test=" name != null and name != '' ">
                name = #{name},
            </if>
            <if test=" descript != null and descript != '' ">
                descript = #{descript},
            </if>
            <if test=" NodeType != null and NodeType != '' ">
                NodeType = #{NodeType},
            </if>
            <if test=" serialserver_ip != null and serialserver_ip != '' ">
                serialserver_ip = #{serialserver_ip},
            </if>
            <if test=" delete != null and delete != '' ">
                `delete` = #{delete},
            </if>
            <if test=" serialserver_port != null and serialserver_port != '' ">
                serialserver_port = #{serialserver_port},
            </if>
            <if test=" InstallPos != null and InstallPos != '' ">
                InstallPos = #{InstallPos},
            </if>
            <if test=" PID != null and PID != '' ">
                PID = #{PID},
            </if>
        </set>
        where addr = #{addr}
    </update>

    <delete id="removeNodes" parameterType="NodesVO">
        delete from Nodes where 1=1
        <if test=" addr != null and addr != '' ">
            and addr = #{addr}
        </if>
    </delete>

    <delete id="removeNodeParams" parameterType="NodesVO">
        delete from nodesparams_resister where 1=1
        <if test=" addr != null and addr != '' ">
            and addr = #{addr}
        </if>
    </delete>
    <delete id="removeNodeParamsLy" parameterType="NodesVO">
        delete from nodesparams_Ly where 1=1
        <if test=" addr != null and addr != '' ">
            and addr = #{addr}
        </if>
    </delete>
    <select id="getxjztList" parameterType="Map" resultType="RealVO">
    select n.*,l.ID,l.seqno,l.ErrFlag,l.TCurrent,l.TTime,l.Detlerior,l.OTemp,l.LCurrent1,l.LCurrent2,l.LCurrent3,l.ErrThunder,l.ErrTemp,l.ErrLeihua,l.ErrLC1,l.ErrLC2,l.ErrLC3,l.Switch1,l.Switch2,l.Switch3,l.Switch4,'' RVal ,l.In_Time,'' ErrR
    from  real_ly l inner join nodes n on l.id = n.id
ORDER BY n.addr asc
    limit ${page_startIndex},${page_pageSize}

    union all

    select n.*,r.ID,r.seqno,r.ErrFlag,'' TCurrent,'' TTime,'' Deterior,'' OTemp,'' LCurrent1,'' LCurrent2,'' LCurrent3,'' ErrThunder,'' ErrTemp,'' ErrLeihua,'' ErrLC1,'' ErrLC2,'' ErrLC3,'' Switch1,'' Switch2,'' Switch3,'' Switch4,r.RVal,
    r.In_Time,r.ErrR
    from
    real_resister r inner join nodes n on a.id = n.id
    ORDER BY n.addr asc
    limit ${page_startIndex},${page_pageSize}


    </select>


    <select id="getLYList" parameterType="Map" resultType="RealVO">
    select n.*,l.ID,l.seqno,l.ErrFlag,l.TCurrent,l.TTime,l.Deterior,l.OTemp,l.LCurrent1,l.LCurrent2,l.LCurrent3,l.ErrThunder,l.ErrTemp,l.ErrLeihua,l.ErrLC1,l.ErrLC2,l.ErrLC3,l.Switch1,l.Switch2,l.Switch3,l.Switch4,'' RVal ,l.In_Time,'' ErrR
    from  real_ly l inner join nodes n on L.id = n.id
ORDER BY n.addr asc
    limit ${page_startIndex},${page_pageSize}
    </select>

    <select id="getLYListCount" parameterType="Map" resultType="Int">
    select count(*) from  real_ly l inner join nodes n on L.id = n.id
    </select>

    <select id="getRESList" parameterType="Map" resultType="RealVO">
    select n.*,r.ID,r.seqno,r.ErrFlag,'' TCurrent,'' TTime,'' Deterior,'' OTemp,'' LCurrent1,'' LCurrent2,'' LCurrent3,'' ErrThunder,'' ErrTemp,'' ErrLeihua,'' ErrLC1,'' ErrLC2,'' ErrLC3,'' Switch1,'' Switch2,'' Switch3,'' Switch4,r.RVal,
    r.In_Time,r.ErrR
    from
    real_resister r inner join nodes n on R.id = N.id
ORDER BY n.addr asc
    limit ${page_startIndex},${page_pageSize}
    </select>

    <select id="getRESListCount" parameterType="Map" resultType="Int">
    select count(*) from  real_resister l inner join nodes n on L.id = n.id
    </select>

</mapper>
